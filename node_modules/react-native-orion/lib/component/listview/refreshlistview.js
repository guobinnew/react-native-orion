/*
 *  Copyright (c) 2016-present, Unique, Inc.
 *  All rights reserved.
 *
 *  This source code is licensed under the BSD-style license found in the
 *  LICENSE file in the root directory of this source tree. An additional grant
 *  of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

import React from 'react';
import {
    Image,
    View,
    Text,
    StyleSheet,
    ListView,
    Dimensions,
    ActivityIndicator,
} from 'react-native';

import OrionListView from './listview';


/*状态迁移
*
*STATUS_NONE->[STATUS_REFRESH_IDLE, STATUS_INFINITE_IDLE, STATUS_INFINITE_LOADED_ALL]
*STATUS_REFRESH_IDLE->[STATUS_NONE, STATUS_WILL_REFRESH]
*STATUS_WILL_REFRESH->[STATUS_REFRESH_IDLE, STATUS_REFRESHING]
*STATUS_REFRESHING->[STATUS_NONE]
*STATUS_INFINITE_IDLE->[STATUS_NONE, STATUS_WILL_INFINITE]
*STATUS_WILL_INFINITE->[STATUS_INFINITE_IDLE, STATUS_INFINITING]
*STATUS_INFINITING->[STATUS_NONE]
*STATUS_INFINITE_LOADED_ALL->[STATUS_NONE]
*
*/
var
STATUS_NONE = 0,
STATUS_REFRESH_IDLE = 1,
STATUS_WILL_REFRESH = 2,
STATUS_REFRESHING = 3,
STATUS_INFINITE_IDLE = 4,
STATUS_WILL_INFINITE = 5,
STATUS_INFINITING = 6,
STATUS_INFINITE_LOADED_ALL = 7;

var DEFAULT_PULL_DISTANCE = 50;
var DEFAULT_HF_HEIGHT = 50;
const DEFAULT_HEADER_PNG= './assets/pull_arrow.png';
const DEFAULT_HEADER_TEXT = '下拉刷新';
const DEFAULT_FOOTER_PNG= './assets/pull_arrow.png';
const DEFAULT_FOOTER_TEXT = '加载更多';

var OrionRefreshListView = React.createClass({
    propTypes: {
        ...OrionListView.propTypes,
        l_footerHeight : PropTypes.number,
        l_pullDistance : PropTypes.number,
        l_renderEmptyRow : PropTypes.func,
        l_renderHeaderRefreshIdle : PropTypes.func,
        l_renderHeaderWillRefresh : PropTypes.func,
        l_renderHeaderRefreshing : PropTypes.func,
        l_renderFooterInifiteIdle : PropTypes.func,
        l_renderFooterWillInifite : PropTypes.func,
        l_renderFooterInifiting : PropTypes.func,
        l_renderFooterInifiteLoadedAll : PropTypes.func,
    },
    getDefaultProps () {
        return {
            ...OrionListView.defaultProps,
            l_footerHeight: DEFAULT_HF_HEIGHT,
            l_pullDistance: DEFAULT_PULL_DISTANCE,
            l_renderEmptyRow: () => {
                return (
                    <View style={{height:Dimensions.get('window').height*2/3, justifyContent:'center',alignItems:'center'}}>
                        <Text style={{fontSize:40, fontWeight:'800', color:'red'}}>
                            {DEFAULT_HEADER_TEXT}
                        </Text>
                    </View>
                )
            },
            l_renderHeaderRefreshIdle: () => {return (
                <View style={{flex:1, height:DEFAULT_HF_HEIGHT, justifyContent:'center', alignItems:'center'}}>
                    <Text style={styles.text}>
                        {DEFAULT_HEADER_TEXT}
                    </Text>
                    <Image
                        source={require(DEFAULT_HEADER_PNG)}
                        resizeMode={Image.resizeMode.stretch}
                        style={styles.image}
                        />
                </View>
            )},
            l_renderHeaderWillRefresh: () => {return (
                <View style={{flex:1, height:DEFAULT_HF_HEIGHT, justifyContent:'center', alignItems:'center'}}>
                    <Text style={styles.text}>
                        {DEFAULT_HEADER_TEXT}
                    </Text>
                    <Image
                        source={require(DEFAULT_HEADER_PNG)}
                        resizeMode={Image.resizeMode.stretch}
                        style={[styles.image, styles.imageRotate]}
                        />
                </View>
            )},
            l_renderHeaderRefreshing: () => {return (
                <View style={{flex:1, height:DEFAULT_HF_HEIGHT, justifyContent:'center', alignItems:'center'}}>
                    <Text style={styles.text}>
                        {DEFAULT_HEADER_TEXT}
                    </Text>

                    <ActivityIndicatorIOS
                        size='small'
                        animating={true}/>
                </View>
            )},
            l_renderFooterInifiteIdle: () => {return (
                <View style={{flex:1, height:DEFAULT_HF_HEIGHT, justifyContent:'center', alignItems:'center'}}>
                    <Image
                        source={require(DEFAULT_FOOTER_PNG)}
                        resizeMode={Image.resizeMode.stretch}
                        style={[styles.image, styles.imageRotate]}
                        />
                    <Text style={styles.text}>
                        {DEFAULT_FOOTER_TEXT}
                    </Text>
                </View>
            )},
            l_renderFooterWillInifite: () => {return (
                <View style={{flex:1, height:DEFAULT_HF_HEIGHT, justifyContent:'center', alignItems:'center'}}>
                    <Image
                        source={require(DEFAULT_FOOTER_PNG)}
                        resizeMode={Image.resizeMode.stretch}
                        style={styles.image}
                        />
                    <Text style={styles.text}>
                        {DEFAULT_FOOTER_TEXT}
                    </Text>
                </View>
            )},
            l_renderFooterInifiting: () => {return (
                <View style={{flex:1, height:DEFAULT_HF_HEIGHT, justifyContent:'center', alignItems:'center'}}>
                    <ActivityIndicatorIOS
                        size='small'
                        animating={true}/>
                    <Text style={styles.text}>
                        {DEFAULT_FOOTER_TEXT}
                    </Text>
                </View>
            )},
            l_renderFooterInifiteLoadedAll: () => { return (
                <View style={{flex:1, height:DEFAULT_HF_HEIGHT, justifyContent:'center', alignItems:'center'}}>
                    <Text style={styles.text}>
                        {DEFAULT_FOOTER_TEXT}
                    </Text>
                </View>
            )},
            l_loadedAllData: () => {
                return false;
            },
            l_onRefresh: () => {
                console.log("onRefresh");
            },
            l_onInfinite: () => {
                console.log("onInfinite");
            },
        };
    },
    getInitialState() {
        return {
            status: STATUS_NONE,
            isLoadedAllData: false,
        }
    },
    _renderRow(text) {
        if (this.dataSource) {
            return this.props.l_renderEmptyRow(text);
        } else {
            return this.props.renderRow(text);
        }
    },
    _renderHeader() {
        var status = this.state.status;
        if (status === STATUS_REFRESH_IDLE) {
            return this.props.l_renderHeaderRefreshIdle();
        }
        if (status === STATUS_WILL_REFRESH) {
            return this.props.l_renderHeaderWillRefresh();
        }
        if (status === STATUS_REFRESHING) {
            return this.props.l_renderHeaderRefreshing();
        }
        return null;
    },
    _renderFooter() {
        var status = this.state.status;
        this.footerIsRender = true;
        if (status === STATUS_INFINITE_IDLE) {
            return this.props.l_renderFooterInifiteIdle();
        }
        if (status === STATUS_WILL_INFINITE) {
            return this.props.l_renderFooterWillInifite();
        }
        if (status === STATUS_INFINITING) {
            return this.props.l_renderFooterInifiting();
        }
        if (status === STATUS_INFINITE_LOADED_ALL) {
            return this.props.l_renderFooterInifiteLoadedAll();
        }
        this.footerIsRender = false;
        return null;
    },
    _handleResponderGrant(event) {
        var nativeEvent = event.nativeEvent;
        if (!nativeEvent.contentInset || this.state.status!==STATUS_NONE) {
            return;
        }
        var y0 = nativeEvent.contentInset.top + nativeEvent.contentOffset.y;
        if (y0 < 0) {
            this.setState({status:STATUS_REFRESH_IDLE});
            return;
        }
        y0 = nativeEvent.contentInset.top + nativeEvent.contentOffset.y +
        nativeEvent.layoutMeasurement.height-nativeEvent.contentSize.height;
        if (y0 > 0 ) {
            if (!this.props.l_loadedAllData()) {
                this.initialInfiniteOffset = (y0>0?y0:0);
                this.setState({status:STATUS_INFINITE_IDLE});
            } else {
                this.setState({status:STATUS_INFINITE_LOADED_ALL});
            }
        }
    },
    _hideHeader() {
        this.setState({status:STATUS_NONE});
    },
    _hideFooter() {
        this.setState({status:STATUS_NONE});
    },
    _handleResponderRelease(event) {
        var status = this.state.status;
        if (status === STATUS_REFRESH_IDLE) {
            this.setState({status:STATUS_NONE});
        } else if (status === STATUS_WILL_REFRESH) {
            this.setState({status:STATUS_REFRESHING});
            this.props.l_onRefresh();
        } else if (status === STATUS_INFINITE_IDLE) {
            this.setState({status:STATUS_NONE});
        } else if (status === STATUS_WILL_INFINITE) {
            this.setState({status:STATUS_INFINITING});
            this.props.l_onInfinite();
        } else if (status === STATUS_INFINITE_LOADED_ALL) {
            this.setState({status:STATUS_NONE});
        }
    },
    _handleScroll(event) {
        var nativeEvent = event.nativeEvent;
        var status = this.state.status;
        if (status===STATUS_REFRESH_IDLE || status===STATUS_WILL_REFRESH) {
            var y = nativeEvent.contentInset.top + nativeEvent.contentOffset.y
            if (status!==STATUS_WILL_REFRESH && y<-this.props.l_pullDistance) {
                this.setState({status:STATUS_WILL_REFRESH});
            } else if (status===STATUS_WILL_REFRESH && y>=-this.props.l_pullDistance) {
                this.setState({status:STATUS_REFRESH_IDLE});
            }
            return;
        }

        if (status===STATUS_INFINITE_IDLE || status===STATUS_WILL_INFINITE) {
            var y = nativeEvent.contentInset.top + nativeEvent.contentOffset.y + nativeEvent.layoutMeasurement.height
            -nativeEvent.contentSize.height-this.initialInfiniteOffset;
            if (this.footerIsRender) {
                y += this.props.l_footerHeight;
            }
            if (status!==STATUS_WILL_INFINITE && y>this.props.l_pullDistance) {
                this.setState({status:STATUS_WILL_INFINITE});
            } else if (status===STATUS_WILL_INFINITE && y<=this.props.l_pullDistance) {
                this.setState({status:STATUS_INFINITE_IDLE});
            }
        }
    },
    render() {
        this.dataSource = null;
        if (!this.props.dataSource.getRowCount()) {
            var DataSource = new ListView.DataSource({rowHasChanged: (r1, r2) => r1 !== r2});
            this.dataSource = DataSource.cloneWithRows([""]);

        }
        return (
            <ListView
                {...this.props}
                dataSource={this.dataSource?this.dataSource:this.props.dataSource}
                renderRow={this._renderRow}
                renderHeader={this._renderHeader}
                renderFooter={this._renderFooter}
                onResponderGrant={this._handleResponderGrant}
                onResponderRelease={this._handleResponderRelease}
                onScroll={this._handleScroll}
                />
        )
    }
});

var styles = StyleSheet.create({
    text: {
        fontSize:13,
        color: '#666'
    },
    image: {
        width:40,
        height:32,
    },
    imageRotate: {
        transform:[{rotateX: '180deg'},],
    }
});

module.exports = OrionRefreshListView;
