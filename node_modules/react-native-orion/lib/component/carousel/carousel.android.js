/*
 *  Copyright (c) 2016-present, Unique, Inc.
 *  All rights reserved.
 *
 *  This source code is licensed under the BSD-style license found in the
 *  LICENSE file in the root directory of this source tree. An additional grant
 *  of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var React = require('react');
var {
  StyleSheet,
  Text,
  View,
  ColorPropType,
  TouchableOpacity,
} = require('react-native');

import OrionComponent from  '../component';
import Aspect from '../../aspect';
import OrionImage from '../image/image';
import TimerMixin from '../../timermixin';
import OrionCarouselPager from './carouselpager';

var OrionCarousel = React.createClass({
  propTypes:{
    ...OrionComponent.propTypes,
    style: View.propTypes.style,
    children: React.PropTypes.node.isRequired,
    l_delay: React.PropTypes.number,
    l_pageStyle: View.propTypes.style,
    l_contentContainerStyle: View.propTypes.style,
    l_autoplay: React.PropTypes.bool,
    l_width: React.PropTypes.number,
    l_height: React.PropTypes.number,
    l_initPage:  React.PropTypes.number,
    l_loop: React.PropTypes.bool,
    l_pageControl: React.PropTypes.shape({
      enable: React.PropTypes.bool,
      color: ColorPropType,
      highlightColor: ColorPropType,
    }),
  },

  mixins: [TimerMixin],

  getDefaultProps: function() {
    return {
      ...OrionComponent.defaultProps,
      l_delay: 4000,
      l_autoplay: true,
      l_width: Aspect.deviceWidth(),
      l_height: 0,
      l_initPage: 0,
      l_loop: true,
      l_pageControl:{
        enable: true,
        color: '#999999',
        highlightColor: '#ff0000',
      }
    };
  },

  getInitialState() {
    return {
      currentPage: this.props.l_initPage > 0 ? this.props.l_initPage - 1 : 0,  //Android循环模式与iOS不同,因此起始索引为0
      size: { width: 0, height: 0 }
    };
  },

  getWidth() {
    if (this.props.l_width !== null) {
      return this.props.l_width;
    } else {
      return Aspect.deviceWidth();
    }
  },

  componentDidMount() {
    if (this.props.l_initPage >= 1) {
      this.refs.pager.scrollToPage(this.props.l_initPage - 1, false);
    }

    if (this.props.l_autoplay && this.props.children){
      this._setUpTimer();
    }
  },

  renderPageIndicator() {
    if (this.props.l_pageControl.enable !== true) {
      return null;
    }

    var pageCtrls = React.Children.map(this.props.children, (page, i) => {
      return (
          <View
              style={[ styles.pagectrl,{backgroundColor: this.state.currentPage == i ? this.props.l_pageControl.highlightColor : this.props.l_pageControl.color}]}
              key={"pagectrl"+i}/>
      );
    });

   return (
        <View style={[styles.pagectrlContainer, {width: this.getWidth()}]}>
          {pageCtrls}
        </View>
    );
  },

  _onLayout: function() {
    let self = this;
    var k = self.state.currentPage;
    this.refs.container.measure(function(x, y, w, h, px, py) {
      self.setState({
        size: { width: w, height: h}
      });
    });
  },

  _setUpTimer() {
    if (this.props.children.length > 1) {
      this.clearTimeout(this.timer);
      this.timer = this.setTimeout(this._animateNextPage, this.props.l_delay);
    }
  },

  _animateNextPage() {

    var activePage = 0;
    if (this.state.currentPage < this.props.children.length - 1) {
      activePage = this.state.currentPage + 1;
    }
    else if (!this.props.l_loop) {
      return;
    }

    this.setState({currentPage:activePage});
    this.refs.pager.scrollToPage(activePage);
    this._setUpTimer();
  },

  _onAnimationBegin() {
    this.clearTimeout(this.timer);
  },

  _onAnimationEnd(activePage) {

    this.setState({currentPage:activePage});
    if (this.props.onPageChange) {
      this.props.onPageChange(activePage);
    }
  },

  render() {

    var contents;
    if (!this.state.hasChildren) {
      contents = (
          <Text style={{backgroundColor: 'white'}}>
            没有图片
          </Text>
      );
    }

    var children = this.props.children;
    contents = (
        <OrionCarouselPager
            ref="pager"
            width={this.getWidth()}
            contentContainerStyle={this.props.l_contentContainerStyle}
            onBegin={this._onAnimationBeginPage}
            onEnd={this._onAnimationEnd}>
          {children}
        </OrionCarouselPager>
    );
    return (
        <View style={[{ flex: 1}, this.props.style]}>
          {contents}
          {this.renderPageIndicator()}
        </View>
    );
  },

});

var styles = StyleSheet.create({
  pagectrlContainer: {
    height: 6,
    flexDirection: 'row',
    position: 'absolute',
    bottom: 10,
    left: 0,
    justifyContent: 'center',
  },

  pagectrl: {
    width: 8,
    height: 8,
    borderRadius: 4,
    marginHorizontal: 4,
    opacity: 0.5,
  },

});

module.exports = OrionCarousel;
