/*
 *  Copyright (c) 2016-present, Unique, Inc.
 *  All rights reserved.
 *
 *  This source code is licensed under the BSD-style license found in the
 *  LICENSE file in the root directory of this source tree. An additional grant
 *  of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

import React from 'react';
import {
    StyleSheet,
    Image,
    Text,
    ScrollView,
    View,
    ColorPropType
} from 'react-native';

import OrionComponent from  '../component';
import Aspect from '../../aspect';
import OrionImage from '../image/image';
import TimerMixin from '../../timermixin';


var OrionCarousel = React.createClass({
  propTypes:{
    ...OrionComponent.propTypes,
    style: View.propTypes.style,
    children: React.PropTypes.node.isRequired,
    l_delay: React.PropTypes.number,
    l_pageStyle: View.propTypes.style,
    l_contentContainerStyle: View.propTypes.style,
    l_autoplay: React.PropTypes.bool,
    l_width: React.PropTypes.number,
    l_height: React.PropTypes.number,
    l_initPage:  React.PropTypes.number,
    l_loop: React.PropTypes.bool,
    l_pageControl: React.PropTypes.shape({
      enable: React.PropTypes.bool,
      color: ColorPropType,
      highlightColor: ColorPropType,
    }),
  },
  mixins: [TimerMixin],
  getDefaultProps: function() {
    return {
        ...OrionComponent.defaultProps,
        l_delay: 4000,
        l_autoplay: true,
        l_loop: true,
        l_width: Aspect.deviceWidth(),
        l_height: 0,
        l_initPage: 0,
        l_pageControl:{
          enable: true,
          color: '#999999',
          highlightColor: '#ff0000',
      }
    };
  },
  getInitialState: function() {
    if (!!this.props.children) {
      var childrenCount = React.Children.count(this.props.children);
      return {
        contentOffset: {x: 0, y: 0},
        currentPage: this.props.l_initPage > 0 ? this.props.l_initPage : 1, // 起始索引为1
        hasChildren: true,
        size: { width: 0, height: 0 }
      };
    }
    else {
      return {
        hasChildren: false,
        size: { width: 0, height: 0 }
      }
    }
  },
  componentDidMount:function(){
    if (this.state.hasChildren === true) {
      this._setUpTimer();
    }
  },
  _onScrollBegin: function(event) {
    this.clearTimeout(this.timer);
  },
  _onScrollEnd: function(event) {
    this._setUpTimer();

    var offset = Object.assign({}, event.nativeEvent.contentOffset);

    var childrenCount = this.props.children.length,
      size = this.state.size;
    if ( Math.abs(offset.x) < 0.5 ) {
      offset.x = childrenCount * size.width;
    }
    else if ( Math.abs(offset.x - (childrenCount+1)*size.width) < 0.5 ) {
      offset.x = size.width;
    }
    this._calculateCurrentPage(offset.x);
    this.setState({contentOffset: offset});
  },
  _onLayout: function() {
    let self = this;
    var k = self.state.currentPage;
    this.refs.container.measure(function(x, y, w, h, px, py) {
      self.setState({
        contentOffset: { x: k * w },
        size: { width: w, height: h}
      });
    });
  },
  _setUpTimer: function() {
    if (this.props.l_autoplay && this.props.children.length > 1) {
      this.clearTimeout(this.timer);
      this.timer = this.setTimeout(this._animateNextPage, this.props.l_delay);
    }
  },
  _animateNextPage: function() {
    var k = this.state.currentPage;
    var size = this.state.size;

    // 退出循环
    if (!this.props.l_loop && k >= this.props.children.length ) {
      return;
    }

    k++;

    this.setState({currentPage: k});
    this.refs.scrollView.scrollTo({y:0, x:k*size.width });
    this._setUpTimer();
  },
  _calculateCurrentPage: function(offset) {
    var size = this.state.size;
    var page = Math.floor((offset - size.width/2) / size.width) + 1;
    this.setState({currentPage: page});
  },

  render: function() {
    var pages = [],
        pageCtrls = [],
        contents,
        pagectrls,
        containerProps,
        pagectrlContainerProps,
        pagectrlProps;

    var size = this.state.size;

    containerProps = {
      ref: 'container',
      onLayout: this._onLayout,
      style: [this.props.style]
    };

    pagectrlContainerProps = {
      style: {
        width: size.width,
        height: 6,
        flexDirection: 'row',
        position: 'absolute',
        bottom: 10,
        left: 0,
        justifyContent: 'center',
      }
    };

    pagectrlProps = {
      style: {
        width: 8,
        height: 8,
        borderRadius: 4,
        marginHorizontal: 4,
        opacity: 0.5,
      }
    };

    if (!this.state.hasChildren) {
      contents = (
        <Text style={{backgroundColor: 'white'}}>
          没有图片
        </Text>
      );
    }

    var children = this.props.children;
    var count = React.Children.count(children);

    // 头尾添加图片,形成无限循环: 3-1-2-3-1
    if (count > 1) {
      pages.push(children[count-1]);
    }

    for (var i=0; i<count; i++) {
      pages.push(children[i]);
    }

    if (count > 1) {
      pages.push(children[0]);
    }

    pages = React.Children.map(pages, (page, i) => {
      return (
        <View
          style={[{width: size.width, height: size.height}, this.props.l_pageStyle]}
          key={"page"+i}>{page}</View>
      );
    });

    contents = (
      <ScrollView
        ref='scrollView'
        onScrollBeginDrag={this._onScrollBegin}
        onMomentumScrollEnd={this._onScrollEnd}
        alwaysBounceHorizontal={false}
        alwaysBounceVertical={false}
        contentInset={{top:0}}
        automaticallyAdjustContentInsets={false}
        showsHorizontalScrollIndicator={false}
        horizontal={true}
        pagingEnabled={true}
        bounces={false}
        contentOffset={this.state.contentOffset}
        contentContainerStyle={[
          styles.horizontalScroll,
          this.props.l_contentContainerStyle,
          {
            width: size.width*(this.props.children.length+(this.props.children.length>1?2:0)),
            height: size.height
          }
        ]}
      >
        {pages}
      </ScrollView>);

    if( this.props.l_pageControl.enable === true ){
      pageCtrls = React.Children.map(children, (page, i) => {
        return (
            <View
                style={[ pagectrlProps.style,{backgroundColor: this.state.currentPage == (i+1) ? this.props.l_pageControl.highlightColor : this.props.l_pageControl.color}]}
                key={"pagectrl"+i}/>
        );
      });

      pagectrls = (
          <View {...pagectrlContainerProps}>
            {pageCtrls}
          </View>
      );
    }

    return (
        <View {...containerProps}>
          {contents}
          {pagectrls}
        </View>
      );
  },
});

var styles = StyleSheet.create({
  horizontalScroll: {
    position:'absolute'
  }
});

module.exports = OrionCarousel;
