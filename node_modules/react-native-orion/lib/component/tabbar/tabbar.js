/*
 *  Copyright (c) 2016-present, Unique, Inc.
 *  All rights reserved.
 *
 *  This source code is licensed under the BSD-style license found in the
 *  LICENSE file in the root directory of this source tree. An additional grant
 *  of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

import {
    Set
} from 'immutable';
import React from 'react';
import {
    StyleSheet,
    Platform,
    TabBarIOS,
    Text,
    View,
    Image,
    ColorPropType,
} from 'react-native';

import Aspect from '../../aspect';
import Layout from './layout';
import OrionComponent from '../component';
import OrionBadge from './badge';
import OrionTabBarItem from './tabbaritem';
import OrionStaticContainer from '../staticcontainer';
import OrionTab from './tab';
import OrionTabItem from './tabitem';

const OrionTabBar = React.createClass({
    statics:{
      tabBarHeight: Layout.tabBarHeight
    },
    propTypes: {
        ...OrionComponent.propTypes,
        style: View.propTypes.style,
        children: React.PropTypes.node.isRequired,
        unselectedTintColor: ColorPropType,
        tintColor:ColorPropType,
        barTintColor: ColorPropType,
        translucent: React.PropTypes.bool,
        itemPositioning: React.PropTypes.oneOf(['fill', 'center', 'auto']),
    },
    getDefaultProps: function() {
        return {
            ...OrionComponent.defaultProps,
            ...View.defaultProps,
            barTintColor: '#DDDDDD',
            tintColor: '#F20044',
            unselectedTintColor: '#333333'
        };
    },

    getInitialState() {
        return {
            renderedTabKeys: this._updateRenderedTabKeys(this.props.children),
        }
    },

    componentDidMount:function(){

    },

    componentWillReceiveProps(nextProps) {
        let { renderedTabKeys } = this.state;
        this.setState({
            renderedTabKeys: this._updateRenderedTabKeys(
                nextProps.children,
                renderedTabKeys,
            ),
        });
    },

    _getTabKey: function(item, index): string {
        return `tab-${index}-${(item.l_id !== null) ? item.l_id : ''}`;
    },

    _updateRenderedTabKeys: function(children, oldTabKeys = Set()){
        let newTabKeys = Set().asMutable();
        React.Children.forEach(children, (item, index) => {
            let key = this._getTabKey(item, index);
            if (oldTabKeys.has(key) || item.props.selected) {
                newTabKeys.add(key);
            }
        });
        return newTabKeys.asImmutable();
    },

    renderAndroid: function () {

        let { style, children, ...props } = this.props;
        let scenes = [];

        React.Children.forEach(children, (item, index) => {
            let tabKey = this._getTabKey(item, index);
            if (!this.state.renderedTabKeys.has(tabKey)) {
                return;
            }

            let { selected } = item.props;
            let scene =
                <SceneContainer key={tabKey} selected={selected} style={style}>
                    {item}
                </SceneContainer>;

            scenes.push(scene);
        });

        return (
            <View {...props} style={[styles.container, style]}>
                {scenes}
                <OrionTab style={{backgroundColor: this.props.barTintColor}}>
                    {React.Children.map(children, this._renderTab)}
                </OrionTab>
            </View>
        );
    },

    renderIOS: function () {
        return (
            <TabBarIOS {...this.props}>{this.props.children}</TabBarIOS>
        );
    },

    render: function () {
        return  Platform.OS === 'android' ? this.renderAndroid() : this.renderIOS();
        //return this.renderAndroid();
    },

    _renderTab(item) {
        
        let icon;
        if (item.props.selected && item.props.selectedIcon ) {
            icon = (<Image style={styles.icon} resizeMode={'contain'} source={item.props.selectedIcon}/>);
        }
        else {
            icon = (<Image style={styles.icon} resizeMode={'contain'} source={item.props.icon}/>);
        }

        let badge;
        if (item.props.badge) {
            badge = <OrionBadge style={{backgroundColor:item.props.badgeColor}}>{item.props.badge}</OrionBadge>;
        }

        return (
            <OrionTabItem
                title={item.props.title}
                allowFontScaling={item.props.allowFontScaling}
                titleStyle={[
                    item.props.titleStyle,
                    item.props.selected ? [
                        styles.defaultSelectedTitle,
                        item.props.selectedTitleStyle,
                    ] : null,
                ]}
                badge={badge}
                onPress={item.props.onPress}
                hidesTabTouch={this.props.hidesTabTouch}>
                {icon}
            </OrionTabItem>
        );
    }
});


const SceneContainer = React.createClass({
    propTypes: {
        ...View.propTypes,
        selected: React.PropTypes.bool,
    },
    render: function () {
        let { selected, ...props } = this.props;
        return (
            <View
                {...props}
                pointerEvents={selected ? 'auto' : 'none'}
                removeClippedSubviews={!selected}
                style={[
                    styles.sceneContainer,
                    selected ? null : styles.hiddenSceneContainer,
                    props.style,
                ]}>
                <OrionStaticContainer shouldUpdate={selected}>
                    {this.props.children}
                </OrionStaticContainer>
            </View>
        );
    }
});

let styles = StyleSheet.create({
    container: {
        flex: 1,
    },
    sceneContainer: {
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        paddingBottom: Layout.tabBarHeight,
    },
    hiddenSceneContainer: {
        overflow: 'hidden',
        opacity: 0,
    },
    defaultSelectedTitle: {
        color: 'rgb(0, 122, 255)',
    },
    defaultSelectedIcon: {
        tintColor: 'rgb(0, 122, 255)',
    },
    icon:{
        width: 20,
        height: 20,
    }
});

OrionTabBar.Item = OrionTabBarItem;


module.exports = OrionTabBar;
