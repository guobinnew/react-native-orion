/*
 *  Copyright (c) 2016-present, Unique, Inc.
 *  All rights reserved.
 *
 *  This source code is licensed under the BSD-style license found in the
 *  LICENSE file in the root directory of this source tree. An additional grant
 *  of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

import React from 'react';
import {
    StyleSheet,
    View,
    Text,
    ScrollView,
} from 'react-native';

import OrionView from  '../view/view';
import OrionGridViewPlaceHolder from './gridviewplaceholder'


var OrionGridView = React.createClass({
    propTypes:{
        ...OrionView.propTypes,
        children: React.PropTypes.node,
        l_column: React.PropTypes.number,  // 列数
        l_rowHeight: React.PropTypes.number,  // 固定行高
        l_contentContainerStyle: View.propTypes.style,  // 内容样式
        l_rowContainerStyle: View.propTypes.style,  // 行样式
    },
    getDefaultProps: function() {
        return {
            ...OrionView.defaultProps,
            column: 2,
            l_contentContainerStyle: {
                justifyContent: 'flex-start',
                alignItems:'stretch',
            },
            l_rowContainerStyle:{
                justifyContent: 'flex-start',
                alignItems: 'stretch',
            }
        };
    },

    getInitialState: function() {
       return {};
    },

    componentDidMount:function(){

    },

    render: function() {

        var rows = [],
            contents,
            containerProps;


        containerProps = {
            ref: 'container',
            style: [styles.container,this.props.style]
        };

        if (!this.state.hasChildren) {
            contents = (
                <Text style={{backgroundColor: 'white'}}>
                    内容为空
                </Text>
            );
        }

        var column = this.props.l_column;
        if( column <= 0 ){
            column = 1;
        }

        var children = this.props.children;
        var count = React.Children.count(children);

        // 行数
        var row = Math.ceil(count / column);

        // 行容器样式
        var rowProps =[styles.rowContainer, this.props.l_rowHeight > 0 ? { height: this.props.l_rowHeight } : null ];

        var index;
        var groups = [];
        for(var i=0;i<count;i++){
            index = Math.floor(i / column);
            if( !groups[index] ){
                groups[index] = [];
            }
            groups[index].push(<View style={styles.cellContaienr} key={i}>{children[i]}</View>);
        }

        for(var i=0;i<row;i++) {
            if(  groups[i].length < column ){
                var placer = column - groups[i].length;
                for(var j=0; j<placer; j++){
                    groups[i].push(<OrionGridViewPlaceHolder style={{flex:1}} key={'placer'+j}/>);
                }
            }
           rows.push(<View style={[rowProps, this.props.l_rowContainerStyle]} key={"row"+i}>{groups[i]}</View>);
        }

        contents = (
            <View
               style={[
                     styles.contentContainer,
                     this.props.l_contentContainerStyle
                     ]}>
                {rows}
            </View>);

        return (
            <OrionView {...containerProps}>
                {contents}
            </OrionView>
        );
    },
});

var styles = StyleSheet.create({
    container:{
    },
    contentContainer:{
        flex:1,
        flexDirection: 'column',
    },
    rowContainer:{
        flex:1,
        flexDirection: 'row',
    },
    cellContaienr:{
        flex:1,
    }
});

module.exports = OrionGridView;
