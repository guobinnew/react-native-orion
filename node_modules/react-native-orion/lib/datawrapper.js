/*
 *  Copyright (c) 2016-present, Unique, Inc.
 *  All rights reserved.
 *
 *  This source code is licensed under the BSD-style license found in the
 *  LICENSE file in the root directory of this source tree. An additional grant
 *  of patent rights can be found in the PATENTS file in the same directory.
 *
 */
'use strict';
function toInt(v){
    if( v === undefined || v === null ){
        return 0;
    }

    var intValue;
    if( typeof v === "string" || typeof v === "number" ){
        intValue = parseInt(v);
    }
    else{
        intValue = 0;
    }

    return isNaN(intValue) ? 0 : intValue;
};

function toString(v){
    if( v === undefined || v === null ){
        return "";
    }

    var stringValue = "";
    if( typeof v === "string" ){
        stringValue = v;
    }
    else if( typeof v === "number" ){
        stringValue = v.toString();
    }
    else if( typeof v === "object" && JSON ){
        stringValue = JSON.stringify(v)
    }

    return stringValue;
};



var DataWrapper = {

    /*附判断数字、浮点的正则表达：
     ”^\\d+$”　　//非负整数（正整数   +   0）
     “^[0-9]*[1-9][0-9]*$”　　//正整数
     “^((-\\d+)|(0+))$”　　//非正整数（负整数   +   0）
     “^-[0-9]*[1-9][0-9]*$”　　//负整数
     “^-?\\d+$”　　　　//整数
     “^\\d+(\\.\\d+)?$”　　//非负浮点数（正浮点数   +   0）
     “^(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*))$”　　//正浮点数
     “^((-\\d+(\\.\\d+)?)|(0+(\\.0+)?))$”　　//非正浮点数（负浮点数   +   0）
     “^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$”　　//负浮点数
     “^(-?\\d+)(\\.\\d+)?$”　　//浮点数
     */

    // 转换为Number
    toNumber: function (v) {
        if (v === undefined || v === null) {
            return 0.0;
        }
        var floatValue = v;
        if (typeof v === "string") {
            floatValue = parseFloat(v);
        }
        else if (typeof v !== "number") {
            floatValue = 0.0;
        }

        return isNaN(floatValue) ? 0.0 : floatValue;
    },

    // 是否为空对象
    isEmpty: function(obj) {
        for (var n in obj) {
            return false;
        }
        return true;
    },

    getInt: function(d, $def = 0){
        if( d === undefined || d === null ){
            return toInt($def);
        }
        return toInt(d);
    },

    getString: function(d, $def = ""){
        if( d === undefined || d === null ){
            return toString($def);
        }
        return toString(d);
    },

    getFloat: function(d, $def = 0.0 ){
        if( d === undefined || d === null ){
            return toNumber($def);
        }
        return toNumber(d);
    },

    getUrl: function(d, $prefix = 'http:'){
        var urlString = toString(d);

        if( urlString != "" ){
            if( !urlString.startsWith("http:") && !urlString.startsWith("https:") ){

                if( urlString.startsWith("//") ){
                    urlString = $prefix + urlString;
                }
                else{
                    urlString = $prefix + "//" + urlString;
                }
            }
        }
        return urlString;
    }

};


module.exports =  DataWrapper;